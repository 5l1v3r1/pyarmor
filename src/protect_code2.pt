def protect_pytransform():

    try:
        import pytransform{suffix} as pytransform
    except ImportError:
        from . import pytransform{suffix} as pytransform

    def assert_builtin(func):
        type = ''.__class__.__class__
        builtin_function = type(''.join)
        if type(func) is not builtin_function:
            raise RuntimeError('%s() is not a builtin' % func.__name__)

    def check_obfuscated_script():
        CO_SIZES = 30, 39
        CO_NAMES = set(['pytransform{suffix}', 'pyarmor',
                        '__name__', '__file__'])
        co = pytransform.sys._getframe(1).f_code
        if not ((set(co.co_names) <= CO_NAMES)
                and (len(co.co_code) in CO_SIZES)):
            raise RuntimeError('unexpected obfuscated script')

    def check_lib_pytransform():
        platname = pytransform.sys.platform
        libname = 'pytransform{suffix}.dylib' if platname.startswith('darwin') else \
                  'pytransform{suffix}.dll' if platname.startswith('win') else \
                  'pytransform{suffix}.so'
        if getattr(pytransform.sys, 'frozen', False):
            filename = pytransform.os.path.join(pytransform.sys._MEIPASS, libname)
        else:
            filename = pytransform.os.path.join({rpath}, {spath}, libname)

        size = pytransform.os.path.getsize(filename) & 0xFFFFFFF0
        n = size >> 2
        with open(filename, 'rb') as f:
            buf = f.read(size)
        fmt = 'I' * n
        checksum = sum(pytransform.struct.unpack(fmt, buf)) & 0xFFFFFFFF
        if checksum not in {checksum}:
            raise RuntimeError('unexpected %s' % filename)

    try:
        assert_builtin(sum)
        assert_builtin(open)
        assert_builtin(len)

        check_obfuscated_script()
        check_lib_pytransform()
    except Exception as e:
        raise RuntimeError("Protection Fault: %s" % e)


protect_pytransform()
